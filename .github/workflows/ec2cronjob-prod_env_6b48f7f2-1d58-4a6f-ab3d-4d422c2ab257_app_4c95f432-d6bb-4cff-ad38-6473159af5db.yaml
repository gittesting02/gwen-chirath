name: >-
  ec2cronjob-prod_env_6b48f7f2-1d58-4a6f-ab3d-4d422c2ab257_app_4c95f432-d6bb-4cff-ad38-6473159af5db
  Pipeline (Skyu Generated)
'on':
  push:
    tags:
      - v*
    paths: []
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_bef52875-9b39-4b87-ad51-d9dbd5f0ea79
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.GWENCHIRATH_ENV_6B48F7F21D584A6FAB3D4D422C2AB257_APP_4C95F432D6BB4CFFAD386473159AF5DB_EC2CRONJOBPROD_ENV_6B48F7F21D584A6FAB3D4D422C2AB257_APP_4C95F432D6BB4CFFAD386473159AF5DB}}
  EC2_INSTANCE_TYPE: t2.2xlarge
  EC2_IMAGE_ID: ami-0c7217cdde317cfec
  EC2_SUBNET_ID: subnet-0511e49f8669e4d30
  EC2_SECURITY_GROUP_ID: sg-0244f2edb7af33703
  EC2_SPOT_INSTANCE_PRICE: '0.158700'
  DOCKER_COMPOSE_FILE_PATH: gwen/docker-compose.yml
  ADDITIONAL_COMPOSE_COMMANDS: 'docker-compose -f gwen/docker-compose.yml run gwen && '
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  S3_SOURCE_PATH: ./gwen/output/reports
  S3_SYNC_URL: >-
    s3://skyu-client-reports/org_148c18cf-e442-4aa8-ace9-b84a9946c8be/project_8e286a34-7a7c-41e0-a412-897e89838e8f/app_4c95f432-d6bb-4cff-ad38-6473159af5db/gwen_outputs/${{github.event.client_payload.commitId
    || github.sha}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  start-runner:
    name: Start Runner
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      EC2_HOST: ${{ env.EC2_HOST }}
      EC2_INSTANCE_ID: ${{ env.EC2_INSTANCE_ID }}
    steps:
      - name: 'Run :: Decoding Secrets 8a80a553-af06-482f-8115-b81ac471cc7c'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 1e72549d-f587-40a4-897c-a77e595b2f5b'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Create AWS Spot Instance'
        run: |2-

                # Get GitHub Actions runner registration token
                response=$(curl -s -X POST         -H 'Accept: application/vnd.github+json'         -H 'Authorization: Bearer ${{ env.pat }}'         -H 'X-GitHub-Api-Version: 2022-11-28'         https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runners/registration-token)

                RUNNER_REG_TOKEN=$(echo "$response" | jq -r .token)
                
                if [ $RUNNER_REG_TOKEN != "null" ]; then
                  USER_DATA="#!/bin/bash
                  
                  apt update && apt install -y apt-transport-https
                  apt-get update && apt install docker.io -y
                  echo \"Docker Installed\"

                  usermod -aG docker ubuntu
                  newgrp docker
                  echo \"ubuntu Added to Groups\"

                  # docker-compose
                  curl -L 'https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64' -o /usr/local/bin/docker-compose
                  echo \"Docker Compose Installed\"
                  chmod +x /usr/local/bin/docker-compose
                  echo \"Docker Compose Permissions added\"
                  
                  # Install GitHub Actions runner
                  mkdir /home/ubuntu/actions-runner && cd /home/ubuntu/actions-runner
                  curl -o actions-runner-linux-x64-2.312.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.312.0/actions-runner-linux-x64-2.312.0.tar.gz
                  echo \"Github Runner Installed\"

                  # Extract the installer
                  tar xzf ./actions-runner-linux-x64-2.312.0.tar.gz
                  echo \"Github Runner Installer Extracted\"
                  
                  # Run GitHub Actions runner configuration
                  export RUNNER_ALLOW_RUNASROOT=1
                  yes '' | ./config.sh --url https://github.com/${GITHUB_REPOSITORY} --token $RUNNER_REG_TOKEN --labels EC2_SKYU_RUNNER_${{env.IMAGE_TAG}}
                  echo \"Github Runner Configured\"
                  
                  # Run GitHub Actions runner
                  yes '' | ./run.sh 
                  echo \"Github Runner UP!\"
                  "
                  
                  ENCODED_USER_DATA=$(echo -n "$USER_DATA" | sed 's/^[[:space:]]*//' | base64 -w 0)
                  echo "ENCODED_USER_DATA :: $ENCODED_USER_DATA"
                  echo "LAUNCH SPECIFICATION JSON :: {\"ImageId\":\"${{ env.EC2_IMAGE_ID }}\",\"InstanceType\":\"${{ env.EC2_INSTANCE_TYPE }}\",\"KeyName\":\"QWENKey\",\"SecurityGroupIds\":[\"${{ env.EC2_SECURITY_GROUP_ID }}\"],\"SubnetId\":\"${{ env.EC2_SUBNET_ID }}\",\"UserData\":\"$ENCODED_USER_DATA\"}"
                  
                  REQUEST_ID=$(aws ec2 request-spot-instances         --spot-price "${{ env.EC2_SPOT_INSTANCE_PRICE }}"         --instance-count 1         --type "one-time"         --launch-specification "{\"ImageId\":\"${{ env.EC2_IMAGE_ID }}\",\"InstanceType\":\"${{ env.EC2_INSTANCE_TYPE }}\",\"KeyName\":\"QWENKey\",\"SecurityGroupIds\":[\"${{ env.EC2_SECURITY_GROUP_ID }}\"],\"SubnetId\":\"${{ env.EC2_SUBNET_ID }}\",\"UserData\":\"$ENCODED_USER_DATA\"}"         --query 'SpotInstanceRequests[0].SpotInstanceRequestId'         --output text)
                  aws ec2 wait spot-instance-request-fulfilled --spot-instance-request-ids $REQUEST_ID
                  INSTANCE_ID=$(aws ec2 describe-spot-instance-requests --spot-instance-request-ids $REQUEST_ID --query 'SpotInstanceRequests[*].InstanceId' --output text)
                  HOSTNAME=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
                  
                  echo "EC2_HOST=$HOSTNAME" >> $GITHUB_ENV
                  echo "EC2_INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV 
                else
                    echo "$response"
                  exit 1
                fi
              
  compose-job:
    name: Compose Job
    permissions: write-all
    runs-on: self-hosted
    needs:
      - start-runner
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets f4f0f3ec-36a3-44e3-b8c7-d2be8140e502'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials b0d85e55-11a3-4d6b-b0e3-e9ce72a2c684'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Docker Compose'
        run: |2-

              docker-compose -f ${{env.DOCKER_COMPOSE_FILE_PATH}} build && docker-compose -f ${{env.DOCKER_COMPOSE_FILE_PATH}} up -d &&
              ${{env.ADDITIONAL_COMPOSE_COMMANDS}}
              docker-compose -f ${{env.DOCKER_COMPOSE_FILE_PATH}} down -v
              
      - name: 'Run :: Sync Outputs to S3 bucket'
        run: |2-

              if [ ! -x "$(command -v aws)" ]; then
                echo "AWS CLI not found, installing..."
                sudo apt update
                sudo apt install -y awscli
              fi

              if aws s3api head-bucket --bucket skyu-client-reports 2>/dev/null; then
                echo "Bucket skyu-client-reports exists."
              # Create the S3 bucket if it doesn't exist
              else
                echo "Creating bucket skyu-client-reports..."
                aws s3api create-bucket --bucket skyu-client-reports --region ${{ env.region }}
              fi

              aws s3 sync ${{ env.S3_SOURCE_PATH }} ${{ env.S3_SYNC_URL }}
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - compose-job
    steps:
      - name: 'Run :: Decoding Secrets a6fa0730-0bfa-4c1b-ba91-589a803d2d1a'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=Deployment&imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
  stop-runner:
    name: Stop Runner
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - start-runner
      - compose-job
    if: ${{ always() }}
    steps:
      - name: 'Run :: Decoding Secrets a864f8e2-a1b0-400d-98c5-ccf04f8d5369'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials 93cfd97e-9295-4e57-ad7e-05df586403ee'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Stop AWS Spot Instance'
        run: |2-

                aws ec2 terminate-instances --instance-ids ${{ needs.start-runner.outputs.EC2_INSTANCE_ID }}
                gh_runner_label=${{ needs.start-runner.outputs.EC2_SKYU_RUNNER }}

                response=$(curl -X GET         https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runners         -H 'Authorization: Bearer ${{ env.pat }}'
                )
                offline_skyu_runners=$(echo "$response" | jq '.runners | map(select((.labels? | any(.name == "EC2_SKYU_RUNNER_${{env.IMAGE_TAG}}"))))')
                echo "Offline Skyu Runners :: $offline_skyu_runners"
                
                echo "Attempting to remove offline skyu runners..."
                for runner in $(echo "$offline_skyu_runners" | jq -r '.[].id'); do
                  echo "Triggering action for runner ID: $runner"
                  curl -X DELETE         https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runners/$runner           -H 'Authorization: Bearer ${{ env.pat }}'
                done
              
